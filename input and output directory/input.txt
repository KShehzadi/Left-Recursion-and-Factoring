A -> A | B
X -> id | id B
Y -> Y a | absolon
program -> programid ( identifier_list ) ; declarations subprogram_declarations compound_statement .
identifier_list -> id | identifier_list , id
declarations -> declarations var identifier_list : type ;
type -> standard_type | array[num...num] of standard_type
standard_type -> integer | real
subprogram_declarations -> subprogram_declarations subprogram_declaration ; | absolon
subprogram_declaration -> subprogram_head declarations compound_statement
subprogram_head -> function id arguments : standard_type ; | procedure id arguments ; 
arguments -> ( parameter_list ) | absolon
parameter_list -> identifier_list : type | parameter_list ; identifer_list : type
compound_statement -> begin optional_statement end
optional_statement -> statement_list | absolon
statement_list -> statement | statement_list ; statement   
statement -> variable assignop expression | procedure_statement | compound_statement | if expression then statement else statement | while expression do statement
variable -> id | id ( expressionn )
expression_list -> expression | expression_list , expression
expression -> simple_expression | simple_expression relop simple_expression
simple_expression -> item | sign term | simple_expression addop term
term -> factor | term mulop factor
factor -> id | id ( expression_list ) | num | ( expression ) | not factor
sign -> + | -